### Templates
_cron_tag: &_cron_tag
  script:
  - echo "TESTING"
  - bash ${TRAVIS_BUILD_DIR}/generate_tags.sh

_build_tar: &_build_tar
  script: ${TRAVIS_BUILD_DIR}/build-script.sh tar
_deploy_tar: &_deploy_tar
  deploy:
  - provider: releases
    api_key: "$GITHUB_OAUTH_TOKEN"
    skip_cleanup: true
    "on":
      tags: true
    file_glob: true
    file: artifacts/*

_build_docker: &_build_docker
  script: ${TRAVIS_BUILD_DIR}/build-script.sh docker

_build_pkgs: &_build_pkgs
  script: ${TRAVIS_BUILD_DIR}/build-script.sh pkgs
_deploy_pkgs: &_deploy_pkgs
  deploy:
  - provider: releases
    api_key: "$GITHUB_OAUTH_TOKEN"
    skip_cleanup: true
    "on":
      tags: true
    file_glob: true
    file: artifacts/*

_deps_386: &_deps_386
  addons:
    apt:
      update: true
      packages:
      - gcc-multilib
      - libc6-dev-i386

_deps_arm: &_deps_arm
  addons:
    apt:
      update: true
      packages:
#      - gcc-multilib
      - gcc-arm-linux-gnueabi
      - gcc-7-arm-linux-gnueabi
      - gcc-arm-linux-gnueabihf
      - gcc-7-arm-linux-gnueabihf
      - libc6-armel-cross
      - libc6-dev-armel-cross
      - libc6-armhf-armel-cross
      - libc6-dev-armhf-armel-cross

_deps_arm64: &_deps_arm64
  addons:
    apt:
      update: true
      packages:
      - gcc-aarch64-linux-gnu
      - gcc-7-aarch64-linux-gnu
      - libc6-arm64-cross
      - libc6-dev-arm64-cross

_deps_win64: &_deps_win64
  addons:
    apt:
      update: true
      packages:
      - mingw-w64
      - mingw-w64-common
      - mingw-w64-tools
      - mingw-w64-i686-dev
      - mingw-w64-x86-64-dev
      - gcc-multilib
      - gcc-mingw-w64
      - gcc-mingw-w64-i686
      - gcc-mingw-w64-x86-64

_deps_docker: &_deps_docker
  addons:
    apt:
      update: true
      sources:
      - sourceline: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
        key_url: https://download.docker.com/linux/ubuntu/gpg
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io

### Logic
dist: bionic

language: go
go: "1.x"
#go: "1.10"

services:
- docker

stages:
- name: cron-tag
  if: type = cron
- name: build-linux
  if: type != cron
- name: build-other
  if: type != cron
#- name: build-other

env:
  global:
  - DOCKER_CLI_EXPERIMENTAL=enabled

before_install:
- echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json

script:
- ./build-script.sh

matrix:
  include:
  - stage: cron-tag
    <<: *_cron_tag
  - env: ARCH_LABEL=i386 BUILD_GOOS=linux BUILD_GOARCH=386
    <<: *_build_tar
    <<: *_deploy_tar
    <<: *_deps_386
    stage: build-linux
  - env: ARCH_LABEL=amd64 BUILD_GOOS=linux BUILD_GOARCH=amd64
    <<: *_build_tar
    <<: *_deploy_tar
  - env: ARCH_LABEL=armel BUILD_GOOS=linux BUILD_GOARCH=arm BUILD_GOARM=5 BUILD_CC=arm-linux-gnueabi-gcc
    <<: *_build_tar
    <<: *_deploy_tar
    <<: *_deps_arm
  - env: ARCH_LABEL=armhf BUILD_GOOS=linux BUILD_GOARCH=arm BUILD_GOARM=6 BUILD_CC=arm-linux-gnueabi-gcc
    <<: *_build_tar
    <<: *_deploy_tar
    <<: *_deps_arm
  - env: ARCH_LABEL=arm64 BUILD_GOOS=linux BUILD_GOARCH=arm64 BUILD_CC=aarch64-linux-gnu-gcc
    <<: *_build_tar
    <<: *_deploy_tar
    <<: *_deps_arm64
  - env: BUILD_TYPE=pkgs
    <<: *_build_pkgs
    <<: *_deploy_pkgs
    <<: *_deps_docker
    stage: build-other
  - env: BUILD_TYPE=docker
    <<: *_build_docker
    <<: *_deps_docker
#  - env: ARCH_LABEL=amd64 BUILD_GOOS=darwin BUILD_GOARCH=amd64 BUILD_CGO_ENABLED=1
#    <<: *_build_tar
#    <<: *_deploy_tar
#    stage: build-other
#  - env: ARCH_LABEL=i386 BUILD_GOOS=windows BUILD_GOARCH=386 BUILD_CGO_ENABLED=1 BUILD_CC=i686-w64-mingw32-gcc BUILD_CXX=i686-w64-mingw32-g++
#    <<: *_build_tar
#    <<: *_deploy_tar
#    <<: *_deps_win64
#  - env: ARCH_LABEL=amd64 BUILD_GOOS=windows BUILD_GOARCH=amd64 BUILD_CGO_ENABLED=1 BUILD_CC=x86_64-w64-mingw32-gcc BUILD_CXX=x86_64-w64-mingw32-g++
#    <<: *_build_tar
#    <<: *_deploy_tar
#    <<: *_deps_win64
