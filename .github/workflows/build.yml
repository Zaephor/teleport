on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
        - name: i386
          go_arch: 386
        - name: amd64
          go_arch: amd64
        - name: armel
          go_arch: arm
          go_arm: 5
          cc: arm-linux-gnueabi-gcc
        - name: armhf
          go_arch: arm
          go_arm: 6
          cc: arm-linux-gnueabi-gcc
        - name: arm64
          go_arch: arm64
          cc: aarch64-linux-gnu-gcc

    env:
      GOOS: linux

    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: vars
      id: vars
      run: |
        echo "::set-output name=go_version::$(awk '/^go/{print $NF}' go.mod || echo '1.14')"
        echo "::set-output name=tag::v$(awk -F '=' '/^VERSION=/{print $NF}' Makefile)"
        echo "::set-output name=pkg_ver::$(awk -F '=' '/^VERSION=/{print $NF}' Makefile)"
#        if [[ -n "${{ github.event.inputs.version }}" ]]; then
#          echo "::set-output name=pkg_ver::$(echo ${{ github.event.inputs.version }} | tr -d '[A-z]' )"
#        else
#          echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
#          echo "::set-output name=pkg_ver::$(echo ${GITHUB_REF#refs/tags/} | tr -d '[A-z]' )"
#        fi

    - uses: actions/setup-go@v2
      with:
        stable: 'true'
        go-version: '${{ steps.vars.outputs.go_version }}'

    - name: install arch deps
      run: |
        if [[ "${{ matrix.go_arch }}" == "386" ]]; then sudo apt-get -f -y install gcc-multilib libc6-dev-i386 ; fi
        if [[ "${{ matrix.go_arch }}" == "arm" ]]; then sudo apt-get -f -y install gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf libc6-armel-cross libc6-dev-armel-cross libc6-armhf-armel-cross libc6-dev-armhf-armel-cross ; fi
        if [[ "${{ matrix.go_arch }}" == "arm64" ]]; then sudo apt-get -f -y install gcc-aarch64-linux-gnu libc6-arm64-cross libc6-dev-arm64-cross ; fi

    - name: make
      id: make
      env:
        GOARCH: ${{ matrix.go_arch }}
        GOARM: ${{ matrix.go_arm }}
        CC: ${{ matrix.cc }}
      run: |
        if [[ -n "${CC}${CXX}" || "${GOHOSTARCH}" != "${GOARCH}" ]]; then export CGO_ENABLED=1 ; fi
        go env
        make release

        BUNDLE=$(ls -1 | grep 'teleport-.*\(zip\|tar.gz\)')
        NEW_BUNDLE="teleport-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ matrix.name }}.tar.gz"
        mkdir artifacts
        mv ${BUNDLE} artifacts/${NEW_BUNDLE}
        ls -la artifacts
        echo "::set-output name=artifact::artifacts/${NEW_BUNDLE}\n"

    - name: prepare for packaging
      run: |
        mkdir -p tmp tmp/usr/local/bin tmp/lib/systemd/system tmp/etc/init
        cp systemd-teleport.service tmp/lib/systemd/system/teleport.service
        cp upstart-teleport.conf tmp/etc/init/teleport.conf
        tar -xvf ${{ steps.make.outputs.artifact }} -C tmp/usr/local/bin --strip-components=1 teleport/teleport teleport/tctl teleport/tsh teleport/VERSION

    - name: build deb
      id: deb
      uses: kentik/pkg
      if: env.GOOS == 'linux'
      with:
        name: teleport
        version: ${{ steps.vars.outputs.pkg_ver }}
        arch: ${{ matrix.name }}
        format: deb
        package: package.yaml

    - name: build rpm
      id: rpm
      uses: kentik/pkg
      if: env.GOOS == 'linux'
      with:
        name: teleport
        version: ${{ steps.vars.outputs.pkg_ver }}
        arch: ${{ matrix.name }}
        format: rpm
        package: package.yaml

    - name: artifacts list
      run: |
        mv ${{ steps.deb.outputs.package }} artifacts/
        mv ${{ steps.rpm.outputs.package }} artifacts/
        find artifacts

    - uses: actions/upload-artifact@v2
      with:
        name: teleport-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ matrix.name }}
        path: artifacts/

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
