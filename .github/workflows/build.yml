on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*'

env:
  GOOS: linux

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: i386
          go_arch: 386
        - name: amd64
          go_arch: amd64
        - name: armel
          go_arch: arm
          go_arm: 5
          cc: arm-linux-gnueabi-gcc
        - name: armhf
          go_arch: arm
          go_arm: 6
          cc: arm-linux-gnueabi-gcc
        - name: arm64
          go_arch: arm64
          cc: aarch64-linux-gnu-gcc

    steps:
    - name: checkout ci
      uses: actions/checkout@v2
      with:
        ref: ci
        path: ci
        fetch-depth: 1
        token: ${{ secrets.GH_PAT }}

    - name: vars
      id: vars_ci
      run: |
        echo "::set-output name=LATEST::$(cat ci/LATEST)"
        if [[ -n "${{ github.event.inputs.version }}" ]]; then
                echo "::set-output name=REF::${{ github.event.inputs.version }}"
        else
                echo "::set-output name=REF::${GITHUB_REF#refs/tags/}"
        fi

    - name: checkout source
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.vars_ci.outputs.REF }}
        path: source
        fetch-depth: 1
        token: ${{ secrets.GH_PAT }}

    - name: vars
      id: vars
      run: |
        VERSION=$(awk -F '=' '/^VERSION=/{print $NF}' source/Makefile)
        if [[ "v${VERSION}" != "${{ steps.vars_ci.outputs.REF }}" ]]; then
                echo "::error ::Makefile and tag didn't match (${VERSION} != ${{ steps.vars_ci.outputs.REF }})"
                exit 1
        fi
        echo "::set-output name=pkg_ver::${VERSION}"
        if [[ -e "source/go.mod" ]]; then
                echo "::set-output name=go_version::$(awk '/^go/{print $NF}' source/go.mod)"
        else
                # TODO: Come back to solving this for older versions
                echo "::set-output name=go_version::"
        fi

    - uses: actions/setup-go@v2
      with:
        stable: 'true'
        go-version: '${{ steps.vars.outputs.go_version }}'

    - name: install arch deps
      run: |
        if [[ "${{ matrix.go_arch }}" == "386" ]]; then sudo apt-get -f -y install gcc-multilib libc6-dev-i386 ; fi
        if [[ "${{ matrix.go_arch }}" == "arm" ]]; then sudo apt-get -f -y install gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf libc6-armel-cross libc6-dev-armel-cross libc6-armhf-armel-cross libc6-dev-armhf-armel-cross ; fi
        if [[ "${{ matrix.go_arch }}" == "arm64" ]]; then sudo apt-get -f -y install gcc-aarch64-linux-gnu libc6-arm64-cross libc6-dev-arm64-cross ; fi

    - name: make tar.gz
      id: make
      env:
        GOARCH: ${{ matrix.go_arch }}
        GOARM: ${{ matrix.go_arm }}
        CC: ${{ matrix.cc }}
      run: |
        mkdir artifacts
        mv source
        if [[ -n "${CC}${CXX}" || "${GOHOSTARCH}" != "${GOARCH}" ]]; then export CGO_ENABLED=1 ; fi
        go env
        make release

        BUNDLE=$(ls -1 | grep 'teleport-.*\(zip\|tar.gz\)')
        NEW_BUNDLE="teleport-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ matrix.name }}.tar.gz"
        mv ${BUNDLE} ../artifacts/${NEW_BUNDLE}
        echo "::set-output name=artifact::artifacts/${NEW_BUNDLE}\n"

    - name: prepare for packaging
      run: |
        mkdir tmp
        cp ci/package.yaml .
        tar -xvf ${{ steps.make.outputs.artifact }} -C tmp --strip-components=1 teleport/teleport teleport/tctl teleport/tsh

    - name: make deb
      id: deb
      uses: kentik/pkg@v1.0.0-rc7
      if: env.GOOS == 'linux'
      with:
        name: teleport
        version: ${{ steps.vars.outputs.pkg_ver }}
        arch: ${{ matrix.name }}
        format: deb
        package: package.yaml

    - name: make rpm
      id: rpm
      uses: kentik/pkg@v1.0.0-rc7
      if: env.GOOS == 'linux'
      with:
        name: teleport
        version: ${{ steps.vars.outputs.pkg_ver }}
        arch: ${{ matrix.name }}
        format: rpm
        package: package.yaml

    - name: artifacts list
      run: |
        mv ${{ steps.deb.outputs.package }} artifacts/
        mv ${{ steps.rpm.outputs.package }} artifacts/
        find artifacts

    - name: Release
      uses: softprops/action-gh-release@v1
#      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: checkout ci
      uses: actions/checkout@v2
      with:
        ref: ci
        path: ci
        fetch-depth: 1
        token: ${{ secrets.GH_PAT }}

    - name: vars
      id: vars_ci
      run: |
        echo "::set-output name=LATEST::$(cat ci/LATEST)"
        if [[ -n "${{ github.event.inputs.version }}" ]]; then
                INPUT="${{ github.event.inputs.version }}"
        else
                INPUT="${GITHUB_REF#refs/tags/}"
        fi
        echo "::set-output name=REF::${INPUT}"
        if [[ "$(cat ci/LATEST)" == "${INPUT}" ]]; then
                echo "::set-output name=TAG::latest"
        else
                echo "::set-output name=TAG::dev"
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to ghcr
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to docker hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: draconrose/teleport,ghcr.io/${{ github.repository_owner	 }}/teleport
        flavor: |
          latest=false
        tags: |
          type=semver,pattern=v{{major}}.{{minor}}.{{patch}},value=${{ steps.vars_ci.outputs.REF }}
          type=semver,pattern=v{{major}}.{{minor}},value=${{ steps.vars_ci.outputs.REF }}
          type=semver,pattern=v{{major}},value=${{ steps.vars_ci.outputs.REF }}
          type=raw,${{ steps.vars_ci.outputs.TAG }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ci
        platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args:
          RELEASE=${{ steps.vars_ci.outputs.REF }}

