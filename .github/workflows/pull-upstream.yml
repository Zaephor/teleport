on:
  workflow_dispatch:
#  schedule:
#  - cron: '0 0 * * *'

env:
  REPO_UPSTREAM: https://github.com/gravitational/teleport.git

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
    - name: checkout ci
      uses: actions/checkout@v2
      with:
        ref: ci
#        path: ci
        fetch-depth: 1
        token: ${{ secrets.GH_PAT }}

    - name: Identify LATEST
      run: |
#        cd ci
        git ls-remote --tags ${{ env.REPO_UPSTREAM }} | awk -F '/' '!/-/ && !/\^/ && /\/v/{$0=$NF;print}' | sort -Vr | head -n 1 > LATEST
        if ! git diff-index --quiet HEAD --; then
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add LATEST
          git commit -m "ci: Bump LATEST telport to $(cat LATEST)"
          git push origin ci --quiet
        fi

    - name: Identify upstream branches
      id: upstream
      run: |
        echo "::set output branches=$(git ls-remote --heads https://github.com/gravitational/teleport.git | awk -F '/' '/refs\/heads\/branch/ && !/-/{$0=$NF;print}' | sort -V | tr '\n' ',')"

    - name: Sync upstream branches
      run: |
#        cd ci
        git remote add upstream ${{ env.REPO_UPSTREAM }}
        for upstream_branch in $(echo "${{ steps.upstream.outputs.branches }}" | tr ',' '\n'); do
          own_branch=$(echo "source-v${upstream_branch/v/}")

          # Find/create matching branch for origin
          if [[ "$(git ls-remote --heads origin ${own_branch})" ]]; then
            git fetch origin ${own_branch}
            git checkout -b ${own_branch} --track origin/${own_branch}
          else
            git fetch upstream refs/heads/branch/${upstream_branch}:${own_branch}
            git checkout ${own_branch}
          fi

          # Update local branch from upstream
          git pull upstream refs/heads/branch/${upstream_branch}

          # Purge non-version-matching and non-release tags
          git tag -l | grep -v "^${upstream_branch}" | xargs git tag -d
          git tag -l | awk '!/^v/ || /-/ || /\^/{print}' | xargs git tag -d

          # Update origin branch and tags
          git push origin ${own_branch}
          git push origin ${own_branch} --tags
          sleep 1s
        done
